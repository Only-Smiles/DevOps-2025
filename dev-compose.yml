services:
  minitwit:
    build:
      context: .
      dockerfile: images/Dockerfile.minitwit
    container_name: minitwit
    stdin_open: true
    tty: true
    networks:
      - main
    depends_on:
      - database
    ports:
        - '4567:4567'
    volumes:
      - '/tmp/minitwit.db:/tmp/minitwit.db'
    environment:
      - RACK_ENV=${APP_ENV}
      - DB_USER=${DB_USER}
      - DB_PWD=${DB_PWD}


  database:
    image: postgres:17.4-bookworm
    container_name: minitwit_db
    restart: always
    networks:
      - main
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PWD}
      POSTGRES_DB: minitwit
      POSTGRES_INITDB_ARGS: "-A md5"
    healthcheck:
      test: "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 10s
      timeout: 10s
      retries: 3


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - main


  grafana:
    image: grafana/grafana:11.5.2
    ports:
      - "3000:3000"
    networks:
      - main


  test:
    build:
      context: .
      dockerfile: images/Dockerfile.test
    container_name: minitwit_test
    depends_on:
      minitwit:
        condition: service_started
      database:
        condition: service_healthy
    restart: "no"
    networks:
      - main
    environment:
      DB_USER: ${DB_USER}
      DB_PWD: ${DB_PWD}


networks:
  main:
    name: 'minitwit_main'
