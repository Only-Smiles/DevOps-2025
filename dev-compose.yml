services:
  minitwit:
    build:
      context: .
      dockerfile: images/Dockerfile.minitwit
    container_name: minitwit
    stdin_open: true
    tty: true
    networks:
      - main
    depends_on:
      - database
    ports:
        - '4567:4567'
    volumes:
      - '/tmp/minitwit.db:/tmp/minitwit.db'
    environment:
      - RACK_ENV=${APP_ENV}
      - DB_USER=${DB_USER}
      - DB_PWD=${DB_PWD}


  database:
    image: postgres:17.4-bookworm
    container_name: minitwit_db
    restart: always
    networks:
      - main
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./remote_files/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PWD}
      POSTGRES_DB: minitwit
      POSTGRES_INITDB_ARGS: "-A md5"
    healthcheck:
      test: "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 10s
      timeout: 10s
      retries: 3


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    expose: 
      - "9090"
    networks:
      - main
    deploy:
      resources:
        limits:
          cpus: '0.2'

  grafana:
    image: grafana/grafana:11.5.2
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./remote_files/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./remote_files/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./remote_files/grafana/alerting:/etc/grafana/provisioning/alerting
    ports:
      - "3000:3000"
    networks:
      - main
  
  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: always
    networks:
      - main
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3


  test:
    build:
      context: .
      dockerfile: images/Dockerfile.test
    container_name: minitwit_test
    depends_on:
      minitwit:
        condition: service_started
      database:
        condition: service_healthy
    restart: "no"
    networks:
      - main
    environment:
      DB_USER: ${DB_USER}
      DB_PWD: ${DB_PWD}


networks:
  main:
    name: 'minitwit_main'

volumes:
  grafana-data:
  redis-data:
    driver: local
  pgdata:
